@*  Generator : Template
    GeneratePrettyNames: true
*@
@using Scheduler;
@using Scheduler.Reporting;
@using Scheduler.Reporting.Templates;

@functions {
    public List<DayReport> Days { get; set; } = new List<DayReport>();

    public CalendarDayView BlankDay() {
        var ret = new CalendarDayView();
        ret.Activities.Add(new CalendarDayActivityView() {
            Owner = ParentingAssignment.Unknown,
            Duration = 1
        });
        return ret;
    }
}

@{
    var DayViews = new List<CalendarDayView>();

    if(Days.Count == 0) {
        for (int i = 0; i < 7; i++) {
            DayViews.Add(BlankDay());
        }
    } else {
        var FirstDay = (int)Days[0].StartDate.DayOfWeek;
        for (int i = 0; i < FirstDay; ++i) {
            DayViews.Add(BlankDay());
        }

        foreach (var item in Days) {
            var DayView = new CalendarDayView();
            DayView.DayNumber = item.Day.ToString();



            var ToAdd = from x in item.Items
                        let Intersection = x.Duration.Intersection(item.Range)
                        where Intersection != null
                        let Description = string.Format("{0}\nFROM: {1}\nTO:   {2}", x.Name, x.Duration.StartDate, x.Duration.EndDate)
                        select new CalendarDayActivityView() {
                            Description = Description,
                            Duration = Intersection.ToTimeSpan().TotalDays,
                            Owner = x.Owner
                        };

            DayView.Activities.AddRange(ToAdd);



            DayViews.Add(DayView);
        }


        var LastDay = (int)Days[Days.Count-1].StartDate.DayOfWeek;
        for (int i = LastDay; i < 6; ++i) {
            DayViews.Add(BlankDay());
        }



    }

}

<div class="Week">
    @foreach (var item in DayViews) {
        @item.TransformText()
    }
</div>