#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Scheduler.Reporting.Templates
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    
    #line 4 "..\..\Reporting\Templates\CalendarWeekView.cshtml"
    using Scheduler;
    
    #line default
    #line hidden
    
    #line 5 "..\..\Reporting\Templates\CalendarWeekView.cshtml"
    using Scheduler.Reporting;
    
    #line default
    #line hidden
    
    #line 6 "..\..\Reporting\Templates\CalendarWeekView.cshtml"
    using Scheduler.Reporting.Templates;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    public partial class CalendarWeekView : RazorGenerator.Templating.RazorTemplateBase
    {
#line hidden

        #line 8 "..\..\Reporting\Templates\CalendarWeekView.cshtml"

    public List<DayReport> Days { get; set; } = new List<DayReport>();

    public CalendarDayView BlankDay() {
        var ret = new CalendarDayView();
        ret.Activities.Add(new CalendarDayActivityView() {
            Owner = ParentingAssignment.Unknown,
            Duration = 1
        });
        return ret;
    }

        #line default
        #line hidden

        public override void Execute()
        {


WriteLiteral("\r\n");




WriteLiteral("\r\n");


WriteLiteral("\r\n\r\n");


            
            #line 21 "..\..\Reporting\Templates\CalendarWeekView.cshtml"
  
    var DayViews = new List<CalendarDayView>();

    if(Days.Count == 0) {
        for (int i = 0; i < 7; i++) {
            DayViews.Add(BlankDay());
        }
    } else {
        var FirstDay = (int)Days[0].StartDate.DayOfWeek;
        for (int i = 0; i < FirstDay; ++i) {
            DayViews.Add(BlankDay());
        }

        foreach (var item in Days) {
            var DayView = new CalendarDayView();
            DayView.DayNumber = item.Day.ToString();



            var ToAdd = from x in item.Items
                        let Intersection = x.Duration.Intersection(item.Range)
                        where Intersection != null
                        let Description = string.Format("{0}\nFROM: {1}\nTO:   {2}", x.Name, x.Duration.StartDate, x.Duration.EndDate)
                        select new CalendarDayActivityView() {
                            Description = Description,
                            Duration = Intersection.ToTimeSpan().TotalDays,
                            Owner = x.Owner
                        };

            DayView.Activities.AddRange(ToAdd);



            DayViews.Add(DayView);
        }


        var LastDay = (int)Days[Days.Count-1].StartDate.DayOfWeek;
        for (int i = LastDay; i < 6; ++i) {
            DayViews.Add(BlankDay());
        }



    }



            
            #line default
            #line hidden
WriteLiteral("\r\n<div class=\"Week\">\r\n");


            
            #line 70 "..\..\Reporting\Templates\CalendarWeekView.cshtml"
     foreach (var item in DayViews) {
        
            
            #line default
            #line hidden
            
            #line 71 "..\..\Reporting\Templates\CalendarWeekView.cshtml"
   Write(item.TransformText());

            
            #line default
            #line hidden
            
            #line 71 "..\..\Reporting\Templates\CalendarWeekView.cshtml"
                             
    }

            
            #line default
            #line hidden
WriteLiteral("</div>");


        }
    }
}
#pragma warning restore 1591
